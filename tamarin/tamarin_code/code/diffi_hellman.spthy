/*
1. C -[pk_C, g^x]-> S
2. C <-[pk_S, g^y]- S
*/

// Send(кто, кому, что)
// Receive(кто, от кого, что)

theory DH
begin

builtins: diffie-hellman, signing

// Client
rule Clnt_Step_1:
let
    pk_C = pk(~pr_C)
    g_x = 'g'^(~x)
in
    [       
        Fr(~pr_C),
        Fr(~x)
    ]
    --[
        Send_1($Client, $Server, <pk_C, g_x>)
    ]->
    [
        Out(<pk_C, g_x>),
        !Clnt_Step_1(~pr_C, pk_C, ~x, g_x)
    ]

rule Clnt_Step_2:
let
    client_key = g_y^(~x)
in
    [
        !Clnt_Step_1(~pr_C, pk_C, ~x, g_x),
        In(<pk_S, g_y>)
    ]
    --[
        Client_Key(client_key),
        Receive_2($Client, $Server, <pk_S, g_y>),
        Client_Finished($Client, client_key)
    ]->
    [
        !Clnt_Step_2(client_key, pk_S, g_y)
    ]

// Server
rule Serv_Step_1:
let
    pk_S = pk(~pr_S)
    g_y = 'g'^(~y)
    server_key = g_x^(~y)
in
    [
        Fr(~pr_S),
        Fr(~y),
        In(<pk_C, g_x>)
    ]
    --[
        Server_Key(server_key),
        Receive_1($Server, $Client, <pk_C, g_x>),
        Send_2($Server, $Client, g_y),
        Server_Finished($Server, server_key)
    ]->
    [
        !Serv_Step_1(~pr_S, pk_S, ~y, g_y),
        Out(<pk_S, g_y>)
    ]


// lemmas
lemma executable_Finished:
    exists-trace
    "Ex Client Server key #i #j. 
        Client_Finished(Client, key) @i & 
        Server_Finished(Server, key) @j
    "

lemma Key_secrecy:
    all-traces
    "All Client Server key 
         #t1 #t2.
    (
        Client_Finished(Client, key) @t1 & 
        Server_Finished(Server, key) @t2
    )
    ==>
    (
        not
        (
            Ex #k.
            (
                K(key) @ #k
            )
        )
    )
    "

lemma auth_1:
    "All Client Server key mess 
         #t1 #t2 #t. 
    (
        Client_Finished(Client, key) @t1 & 
        Server_Finished(Server, key) @t2 &
        Receive_1(Server, Client, mess) @t
    )
    ==> 
        (Ex #j. Send_1(Client, Server, mess) @j & j<t)
    "

lemma auth_2:
    "All Client Server key mess 
         #t1 #t2 #t. 
    (
        Client_Finished(Client, key) @t1 & 
        Server_Finished(Server, key) @t2 &
        Receive_2(Client, Server, mess) @t
    )
    ==> 
        (Ex #j. Send_2(Server, Client, mess) @j & j<t)
    "

end